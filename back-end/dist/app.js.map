{"version":3,"sources":["../app.js"],"names":["express","require","session","path","favicon","logger","cookieParser","bodyParser","mongoose","api","app","db","connection","on","console","error","once","log","connect","set","join","__dirname","use","json","urlencoded","extended","static","secret","resave","saveUninitialized","req","res","next","err","Error","status","locals","message","get","render","module","exports"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,UAAUD,QAAQ,iBAAR,CAAd;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;AACA,IAAIG,UAAUH,QAAQ,eAAR,CAAd;AACA,IAAII,SAASJ,QAAQ,QAAR,CAAb;AACA,IAAIK,eAAeL,QAAQ,eAAR,CAAnB;AACA,IAAIM,aAAaN,QAAQ,aAAR,CAAjB;AACA,IAAIO,WAAWP,QAAQ,UAAR,CAAf;;AAEA,IAAIQ,MAAMR,QAAQ,UAAR,CAAV;;AAEA,IAAIS,MAAMV,SAAV;;AAEA,IAAMW,KAAKH,SAASI,UAApB;AACAD,GAAGE,EAAH,CAAM,OAAN,EAAeC,QAAQC,KAAvB;AACAJ,GAAGK,IAAH,CAAQ,MAAR,EAAgB,YAAM;AAAEF,UAAQG,GAAR,CAAY,6BAAZ;AAA6C,CAArE;AACA;AACAT,SAASU,OAAT,CAAiB,2BAAjB;;AAEA;AACAR,IAAIS,GAAJ,CAAQ,OAAR,EAAiBhB,KAAKiB,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACAX,IAAIS,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAEA;AACA;AACAT,IAAIY,GAAJ,CAAQjB,OAAO,KAAP,CAAR;AACAK,IAAIY,GAAJ,CAAQf,WAAWgB,IAAX,EAAR;AACAb,IAAIY,GAAJ,CAAQf,WAAWiB,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAf,IAAIY,GAAJ,CAAQhB,cAAR;AACAI,IAAIY,GAAJ,CAAQtB,QAAQ0B,MAAR,CAAevB,KAAKiB,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;AAEAX,IAAIY,GAAJ,CAAQ,MAAR,EAAgBb,GAAhB;;AAEA;AACAC,IAAIY,GAAJ,CAAQpB,QAAQ;AACZyB,UAAQ,gBADI;AAEZC,UAAQ,KAFI;AAGZC,qBAAmB;AAHP,CAAR,CAAR;;AAMA;AACAnB,IAAIY,GAAJ,CAAQ,UAASQ,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/B,MAAIC,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAV;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAH,OAAKC,GAAL;AACD,CAJD;;AAMA;AACAvB,IAAIY,GAAJ,CAAQ,UAASW,GAAT,EAAcH,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AACpC;AACAD,MAAIK,MAAJ,CAAWC,OAAX,GAAqBJ,IAAII,OAAzB;AACAN,MAAIK,MAAJ,CAAWrB,KAAX,GAAmBe,IAAIpB,GAAJ,CAAQ4B,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCL,GAAvC,GAA6C,EAAhE;;AAEA;AACAF,MAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAJ,MAAIQ,MAAJ,CAAW,OAAX;AACD,CARD;;AAUAC,OAAOC,OAAP,GAAiB/B,GAAjB","file":"app.js","sourcesContent":["var express = require('express');\nlet session = require('express-session');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nlet mongoose = require('mongoose');\n\nvar api = require('./routes');\n\nvar app = express();\n\nconst db = mongoose.connection;\ndb.on('error', console.error);\ndb.once('open', () => { console.log('Connected to mongodb server'); });\n// mongoose.connect('mongodb://username:password@host:port/database=');\nmongoose.connect('mongodb://localhost:27017');\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/api', api);\n\n/* use session */\napp.use(session({\n    secret: 'CodeLab1$1$234',\n    resave: false,\n    saveUninitialized: true\n}));\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n"]}