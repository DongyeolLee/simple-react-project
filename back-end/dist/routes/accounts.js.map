{"version":3,"sources":["../../routes/accounts.js"],"names":["express","require","Account","router","Router","post","req","res","usernameRegex","test","body","username","status","json","error","code","password","length","findOne","err","exists","account","generateHash","save","success","validateHash","session","loginInfo","_id","get","info","destroy","module","exports"],"mappings":"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","file":"accounts.js","sourcesContent":["var express = require('express');\nconst Account = require('../models/account');\nvar router = express.Router();\n\nrouter.post('/signup', (req, res) => {\n    // CHECK USERNAME FORMAT\n    let usernameRegex = /^[a-z0-9]+$/;\n\n    if(!usernameRegex.test(req.body.username)) {\n        return res.status(400).json({\n            error: \"BAD USERNAME\",\n            code: 1\n        });\n    }\n\n    // CHECK PASS LENGTH\n    if(req.body.password.length < 4 || typeof req.body.password !== \"string\") {\n        return res.status(400).json({\n            error: \"BAD PASSWORD\",\n            code: 2\n        });\n    }\n\n    // CHECK USER EXISTANCE\n    Account.findOne({ username: req.body.username }, (err, exists) => {\n        if (err) throw err;\n        if(exists){\n            return res.status(409).json({\n                error: \"USERNAME EXISTS\",\n                code: 3\n            });\n        }\n\n        // CREATE ACCOUNT\n        let account = new Account({\n            username: req.body.username,\n            password: req.body.password\n        });\n\n        account.password = account.generateHash(account.password);\n\n        // SAVE IN THE DATABASE\n        account.save( err => {\n            if(err) throw err;\n            return res.json({ success: true });\n        });\n\n    });\n});\n\nrouter.post('/signin', (req, res) => {\n    if(typeof req.body.password !== \"string\") {\n        return res.status(401).json({\n            error: \"LOGIN FAILED\",\n            code: 1\n        });\n    }\n\n    // FIND THE USER BY USERNAME\n    Account.findOne({ username: req.body.username}, (err, account) => {\n        if(err) throw err;\n\n        // CHECK ACCOUNT EXISTANCY\n        if(!account) {\n            return res.status(401).json({\n                error: \"LOGIN FAILED\",\n                code: 1\n            });\n        }\n\n        // CHECK WHETHER THE PASSWORD IS VALID\n        if(!account.validateHash(req.body.password)) {\n            return res.status(401).json({\n                error: \"LOGIN FAILED\",\n                code: 1\n            });\n        }\n\n        // ALTER SESSION\n        let session = req.session;\n        session.loginInfo = {\n            _id: account._id,\n            username: account.username\n        };\n\n        // RETURN SUCCESS\n        return res.json({\n            success: true\n        });\n    });\n});\n\nrouter.get('/getinfo', (req, res) => {\n    if(typeof req.session.loginInfo === \"undefined\") {\n        return res.status(401).json({\n            error: 1\n        });\n    }\n\n    res.json({ info: req.session.loginInfo });\n});\n\nrouter.post('/logout', (req, res) => {\n    req.session.destroy(err => { if(err) throw err; });\n    return res.json({ success: true });\n});\n\nmodule.exports=router;\n"]}