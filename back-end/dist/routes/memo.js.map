{"version":3,"sources":["../../routes/memo.js"],"names":["express","require","Memo","mongoose","router","Router","post","req","res","session","loginInfo","status","json","error","code","body","contents","memo","writer","username","save","err","success","put","Types","ObjectId","isValid","params","id","findById","date","edited","Date","is_edited","delete","remove","_id","get","find","sort","limit","exec","memos"],"mappings":"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","file":"memo.js","sourcesContent":["const express = require('express');\nconst Memo = require('../models/memo');\nconst mongoose = require('mongoose');\n\nconst router = express.Router();\n\n// WRITE MEMO\nrouter.post('/', (req, res) => {\n    // CHECK LOGIN STATUS\n    if(typeof req.session.loginInfo === 'undefined') {\n        return res.status(403).json({\n            error: \"NOT LOGGED IN\",\n            code: 1\n        });\n    }\n\n    // CHECK CONTENTS VALID\n    if(typeof req.body.contents !== 'string') {\n        return res.status(400).json({\n            error: \"EMPTY CONTENTS\",\n            code: 2\n        });\n    }\n\n    if(req.body.contents === \"\") {\n        return res.status(400).json({\n            error: \"EMPTY CONTENTS\",\n            code: 2\n        });\n    }\n\n    // CREATE NEW MEMO\n    let memo = new Memo({\n        writer: req.session.loginInfo.username,\n        contents: req.body.contents\n    });\n\n    // SAVE IN DATABASE\n    memo.save( err => {\n        if(err) throw err;\n        return res.json({ success: true });\n    });\n});\n\n// MODIFY MEMO\nrouter.put('/:id', (req, res) => {\n\n    // CHECK MEMO ID VALIDITY\n    if(!mongoose.Types.ObjectId.isValid(req.params.id)) {\n        return res.status(400).json({\n            error: \"INVALID ID\",\n            code: 1\n        });\n    }\n\n    // CHECK CONTENTS VALID\n    if(typeof req.body.contents !== 'string') {\n        return res.status(400).json({\n            error: \"EMPTY CONTENTS\",\n            code: 2\n        });\n    }\n\n    if(req.body.contents === \"\") {\n        return res.status(400).json({\n            error: \"EMPTY CONTENTS\",\n            code: 2\n        });\n    }\n\n    // CHECK LOGIN STATUS\n    if(typeof req.session.loginInfo === 'undefined') {\n        return res.status(403).json({\n            error: \"NOT LOGGED IN\",\n            code: 3\n        });\n    }\n\n    // FIND MEMO\n    Memo.findById(req.params.id, (err, memo) => {\n        if(err) throw err;\n\n        // IF MEMO DOES NOT EXIST\n        if(!memo) {\n            return res.status(404).json({\n                error: \"NO RESOURCE\",\n                code: 4\n            });\n        }\n\n        // IF EXISTS, CHECK WRITER\n        if(memo.writer != req.session.loginInfo.username) {\n            return res.status(403).json({\n                error: \"PERMISSION FAILURE\",\n                code: 5\n            });\n        }\n\n        // MODIFY AND SAVE IN DATABASE\n        memo.contents = req.body.contents;\n        memo.date.edited = new Date();\n        memo.is_edited = true;\n\n        memo.save((err, memo) => {\n            if(err) throw err;\n            return res.json({\n                success: true,\n                memo\n            });\n        });\n\n    });\n\n});\n\n// DELETE MEMO\nrouter.delete('/:id', (req, res) => {\n\n    // CHECK MEMO ID VALIDITY\n    if(!mongoose.Types.ObjectId.isValid(req.params.id)) {\n        return res.status(400).json({\n            error: \"INVALID ID\",\n            code: 1\n        });\n    }\n\n    // CHECK LOGIN STATUS\n    if(typeof req.session.loginInfo === 'undefined') {\n        return res.status(403).json({\n            error: \"NOT LOGGED IN\",\n            code: 2\n        });\n    }\n\n    // FIND MEMO AND CHECK FOR WRITER\n    Memo.findById(req.params.id, (err, memo) => {\n        if(err) throw err;\n\n        if(!memo) {\n            return res.status(404).json({\n                error: \"NO RESOURCE\",\n                code: 3\n            });\n        }\n        if(memo.writer != req.session.loginInfo.username) {\n            return res.status(403).json({\n                error: \"PERMISSION FAILURE\",\n                code: 4\n            });\n        }\n\n        // REMOVE THE MEMO\n        Memo.remove({ _id: req.params.id }, err => {\n            if(err) throw err;\n            res.json({ success: true });\n        });\n    });\n});\n\n// GET MEMO LIST\nrouter.get('/', (req, res) => {\n    Memo.find()\n        .sort({\"_id\": -1})\n        .limit(6)\n        .exec((err, memos) => {\n            if(err) throw err;\n            res.json(memos);\n        });\n});\n\nexport default router\n"]}